name: "TILES"

### NETWORK ###

layer {
  type: "Python"
  name: "input_data"
  top: "data"
  top: "label"
  python_param {
    module: "input_data_layer"
    layer: "InputRead"
    param_str: "TRAIN"
  }
  include: { phase: TRAIN }
}
layer {
  type: "Python"
  name: "input_data"
  top: "data"
  top: "label"
  python_param {
    module: "input_data_layer"
    layer: "InputRead"
    param_str: "VAL"
  }
  include: { phase: TEST }
}


layer {
 name: "features"
 type: "PixelFeature"
 bottom: "data"                 # Input data blob
 top: "bilateral_features"      # Output feature blob
 pixel_feature_param{
   type: POSITION_AND_RGB       # Feature type (others: RGB, POSITION)
   pos_scale: 0.05              # Position feature scale
   color_scale: 10              # Color feature scale
 }
}

layer {
  name: "permutohedral1"
  type: "Permutohedral"
  bottom: "data"                # Input blob
  bottom: "bilateral_features"  # Input features
  bottom: "bilateral_features"  # Output features

  top: "conv1"                  # Output filtered blob
  top: "lattice"                # Outputs the lattice that can be used by other permutohedral layer

  permutohedral_param {
    num_output: 32              # Number of filter banks == dimension of the output signal.
    group: 1                    # Number of convolutional groups (default is 1).
    neighborhood_size: 1        # Filter neighborhood size
    bias_term: true             # Whether to use bias term or not
    norm_type: AFTER            # SYMMENTRIC (default): Applies the signal normalization before and after the filtering;
                                # AFTER:                Applies the signal normalization after the filtering.
    offset_type: NONE           # FULL (default): Full Gaussian Offset;
                                # DIAG:           Diagonal Gaussian offset;
                                # NONE:           No offset.
    filter_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
 }
}
layer {
  bottom: "conv1"
  top: "conv1"
  name: "relu1"
  type: "ReLU"
}


layer {
  name: "permutohedral2"
  type: "Permutohedral"
  bottom: "conv1"
  bottom: "bilateral_features"
  bottom: "bilateral_features"
  bottom: "lattice"

  top: "conv2"

  permutohedral_param {
    num_output: 16
    group: 1
    neighborhood_size: 1
    bias_term: true
    norm_type: AFTER
    offset_type: NONE

    repeated_init: false
    filter_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
 }
}
layer {
  bottom: "conv2"
  top: "conv2"
  name: "relu2"
  type: "ReLU"
}


layer {
  name: "permutohedral3"
  type: "Permutohedral"
  bottom: "conv2"
  bottom: "bilateral_features"
  bottom: "bilateral_features"
  bottom: "lattice"

  top: "conv_result"

  permutohedral_param {
    num_output: 2
    group: 1
    neighborhood_size: 1
    bias_term: true
    norm_type: AFTER
    offset_type: NONE

    repeated_init: false
    filter_filler {
      type: "gaussian"
      std: 0.001
    }
    bias_filler {
      type: "constant"
      value: 0
    }
 }
}

layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "conv_result"
  bottom: "label"
  top: "loss"
}

layer {
  name: "accuracy"
  type: "Accuracy"
  bottom: "conv_result"
  bottom: "label"
  top: "accuracy"
}

### END ###
